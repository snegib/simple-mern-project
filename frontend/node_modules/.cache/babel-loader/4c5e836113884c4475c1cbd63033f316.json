{"ast":null,"code":"var _jsxFileName = \"E:\\\\simple-mern-project\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        // all existing state\n        // bewlow are the state we want to update\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false\n  });\n\n  const onChangeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: onChangeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: onChangeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, props.lable), element, !inputState.isValid && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 37\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["E:/simple-mern-project/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","Input","props","inputState","dispatch","onChangeHandler","event","target","touchHandler","element","id","placeholder","rows","lable","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO,EACH,GAAGF,KADA;AACO;AACV;AACAG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAHX;AAIHC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAJd,OAAP;;AAMJ,SAAK,OAAL;AAEA;AACI,aAAON,KAAP;AAXR;AAaH,CAdD;;AAgBA,MAAMO,KAAK,GAAIC,KAAD,IAAW;AACrB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBb,UAAU,CAACE,YAAD,EAAe;AACpDI,IAAAA,KAAK,EAAE,EAD6C;AAEpDE,IAAAA,OAAO,EAAE;AAF2C,GAAf,CAAzC;;AAIA,QAAMM,eAAe,GAAIC,KAAD,IAAW;AAC/BF,IAAAA,QAAQ,CAAC;AACLR,MAAAA,IAAI,EAAE,QADD;AAELE,MAAAA,GAAG,EAAEQ,KAAK,CAACC,MAAN,CAAaV,KAFb;AAGLG,MAAAA,UAAU,EAAEE,KAAK,CAACF;AAHb,KAAD,CAAR;AAKH,GAND;;AAOA,QAAMQ,YAAY,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMa,OAAO,GACTP,KAAK,CAACO,OAAN,KAAkB,OAAlB,gBACI;AACI,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACN,IAFhB;AAGI,IAAA,WAAW,EAAEM,KAAK,CAACS,WAHvB;AAII,IAAA,QAAQ,EAAEN,eAJd;AAKI,IAAA,MAAM,EAAEG,YALZ;AAMI,IAAA,KAAK,EAAEL,UAAU,CAACN,KANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,gBAUI;AACI,IAAA,EAAE,EAAEK,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAc,CAFxB;AAGI,IAAA,QAAQ,EAAEP,eAHd;AAII,IAAA,MAAM,EAAEG,YAJZ;AAKI,IAAA,KAAK,EAAEL,UAAU,CAACN,KALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXR;AAmBA,sBACI;AACI,IAAA,SAAS,EAAG,gBACR,CAACM,UAAU,CAACJ,OAAZ,IAAuB,uBAC1B,EAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI;AAAO,IAAA,OAAO,EAAEG,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACW,KAAjC,CALJ,EAMKJ,OANL,EAOK,CAACN,UAAU,CAACJ,OAAZ,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIG,KAAK,CAACY,SAAV,CAP5B,CADJ;AAWH,CA7CD;;AA+CA,eAAeb,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n            return {\r\n                ...state, // all existing state\r\n                // bewlow are the state we want to update\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators),\r\n            };\r\n        case \"TOUCH\":\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = (props) => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: \"\",\r\n        isValid: false,\r\n    });\r\n    const onChangeHandler = (event) => {\r\n        dispatch({\r\n            type: \"CHANGE\",\r\n            val: event.target.value,\r\n            validators: props.validators,\r\n        });\r\n    };\r\n    const touchHandler = () => {\r\n        dispatch({ type: \"TOUCH\" });\r\n    };\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={onChangeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n            <textarea\r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onChange={onChangeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                !inputState.isValid && \"form-control--invalid\"\r\n            }`}\r\n        >\r\n            <label htmlFor={props.id}>{props.lable}</label>\r\n            {element}\r\n            {!inputState.isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}