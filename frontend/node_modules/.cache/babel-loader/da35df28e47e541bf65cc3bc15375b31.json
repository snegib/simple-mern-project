{"ast":null,"code":"var _jsxFileName = \"E:\\\\simple-mern-project\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useEffect, useReducer } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.value || \"\",\n    isTouched: false,\n    isValid: props.valid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const onChangeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: onChangeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: onChangeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["E:/simple-mern-project/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useEffect","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","valid","id","onInput","onChangeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case \"CHANGE\":\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators),\n            };\n        case \"TOUCH\": {\n            return {\n                ...state,\n                isTouched: true,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nconst Input = (props) => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.value || \"\",\n        isTouched: false,\n        isValid: props.valid || false,\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n    useEffect(() => {\n        onInput(id, value, isValid);\n    }, [id, value, isValid, onInput]);\n\n    const onChangeHandler = (event) => {\n        dispatch({\n            type: \"CHANGE\",\n            val: event.target.value,\n            validators: props.validators,\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: \"TOUCH\",\n        });\n    };\n\n    const element =\n        props.element === \"input\" ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={onChangeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={onChangeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        );\n\n    return (\n        <div\n            className={`form-control ${\n                !inputState.isValid &&\n                inputState.isTouched &&\n                \"form-control--invalid\"\n            }`}\n        >\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && (\n                <p>{props.errorText}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}