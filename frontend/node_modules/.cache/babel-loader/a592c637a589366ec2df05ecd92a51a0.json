{"ast":null,"code":"var _jsxFileName = \"E:\\\\simple-mern-project\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isTouched: false,\n    isValid: false\n  });\n\n  const onChangeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["E:/simple-mern-project/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","onChangeHandler","event","target","touchHandler","element","id","placeholder","changeHandler","rows","label","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFX;AAGHC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHd,OAAP;;AAKJ,SAAK,OAAL;AAAc;AACV,eAAO,EACH,GAAGN,KADA;AAEHO,UAAAA,SAAS,EAAE;AAFR,SAAP;AAIH;;AACD;AACI,aAAOP,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,MAAMQ,KAAK,GAAIC,KAAD,IAAW;AACrB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBd,UAAU,CAACE,YAAD,EAAe;AACpDI,IAAAA,KAAK,EAAE,EAD6C;AAEpDI,IAAAA,SAAS,EAAE,KAFyC;AAGpDF,IAAAA,OAAO,EAAE;AAH2C,GAAf,CAAzC;;AAMA,QAAMO,eAAe,GAAIC,KAAD,IAAW;AAC/BF,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAE,QADD;AAELE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAFb;AAGLG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHb,KAAD,CAAR;AAKH,GAND;;AAQA,QAAMS,YAAY,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMc,OAAO,GACTP,KAAK,CAACO,OAAN,KAAkB,OAAlB,gBACI;AACI,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACP,IAFhB;AAGI,IAAA,WAAW,EAAEO,KAAK,CAACS,WAHvB;AAII,IAAA,QAAQ,EAAEC,aAJd;AAKI,IAAA,MAAM,EAAEJ,YALZ;AAMI,IAAA,KAAK,EAAEL,UAAU,CAACP,KANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,gBAUI;AACI,IAAA,EAAE,EAAEM,KAAK,CAACQ,EADd;AAEI,IAAA,IAAI,EAAER,KAAK,CAACW,IAAN,IAAc,CAFxB;AAGI,IAAA,QAAQ,EAAED,aAHd;AAII,IAAA,MAAM,EAAEJ,YAJZ;AAKI,IAAA,KAAK,EAAEL,UAAU,CAACP,KALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXR;AAoBA,sBACI;AACI,IAAA,SAAS,EAAG,gBACR,CAACO,UAAU,CAACL,OAAZ,IACAK,UAAU,CAACH,SADX,IAEA,uBACH,EALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI;AAAO,IAAA,OAAO,EAAEE,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACY,KAAjC,CAPJ,EAQKL,OARL,EASK,CAACN,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,KAAK,CAACa,SAAV,CAVR,CADJ;AAeH,CAxDD;;AA0DA,eAAed,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case \"CHANGE\":\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators),\n            };\n        case \"TOUCH\": {\n            return {\n                ...state,\n                isTouched: true,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nconst Input = (props) => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: \"\",\n        isTouched: false,\n        isValid: false,\n    });\n\n    const onChangeHandler = (event) => {\n        dispatch({\n            type: \"CHANGE\",\n            val: event.target.value,\n            validators: props.validators,\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: \"TOUCH\",\n        });\n    };\n\n    const element =\n        props.element === \"input\" ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        );\n\n    return (\n        <div\n            className={`form-control ${\n                !inputState.isValid &&\n                inputState.isTouched &&\n                \"form-control--invalid\"\n            }`}\n        >\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && (\n                <p>{props.errorText}</p>\n            )}\n        </div>\n    );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}