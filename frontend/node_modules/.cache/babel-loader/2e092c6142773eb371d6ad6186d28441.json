{"ast":null,"code":"var _jsxFileName = \"E:\\\\simple-mern-project\\\\frontend\\\\src\\\\shared\\\\components\\\\FormElements\\\\Input.js\";\nimport React, { useReducer } from \"react\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        // all existing state\n        // bewlow are the state we want to update\n        value: action.val,\n        isValid: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false\n  });\n\n  const onChangeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: onChangeHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: onChangeHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, props.lable), element, !inputState.isValid && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 37\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["E:/simple-mern-project/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","inputReducer","state","action","type","value","val","isValid","Input","props","inputState","dispatch","onChangeHandler","event","target","element","id","placeholder","rows","lable","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO,EACH,GAAGF,KADA;AACO;AACV;AACAG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAHX;AAIHC,QAAAA,OAAO,EAAE;AAJN,OAAP;;AAMJ;AACI,aAAOL,KAAP;AATR;AAWH,CAZD;;AAcA,MAAMM,KAAK,GAAIC,KAAD,IAAW;AACrB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACC,YAAD,EAAe;AACpDI,IAAAA,KAAK,EAAE,EAD6C;AAEpDE,IAAAA,OAAO,EAAE;AAF2C,GAAf,CAAzC;;AAIA,QAAMK,eAAe,GAAIC,KAAD,IAAW;AAC/BF,IAAAA,QAAQ,CAAC;AAAEP,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,GAAG,EAAEO,KAAK,CAACC,MAAN,CAAaT;AAApC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMU,OAAO,GACTN,KAAK,CAACM,OAAN,KAAkB,OAAlB,gBACI;AACI,IAAA,EAAE,EAAEN,KAAK,CAACO,EADd;AAEI,IAAA,IAAI,EAAEP,KAAK,CAACL,IAFhB;AAGI,IAAA,WAAW,EAAEK,KAAK,CAACQ,WAHvB;AAII,IAAA,QAAQ,EAAEL,eAJd;AAKI,IAAA,KAAK,EAAEF,UAAU,CAACL,KALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,gBASI;AACI,IAAA,EAAE,EAAEI,KAAK,CAACO,EADd;AAEI,IAAA,IAAI,EAAEP,KAAK,CAACS,IAAN,IAAc,CAFxB;AAGI,IAAA,QAAQ,EAAEN,eAHd;AAII,IAAA,KAAK,EAAEF,UAAU,CAACL,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVR;AAiBA,sBACI;AACI,IAAA,SAAS,EAAG,gBACR,CAACK,UAAU,CAACH,OAAZ,IAAuB,uBAC1B,EAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI;AAAO,IAAA,OAAO,EAAEE,KAAK,CAACO,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BP,KAAK,CAACU,KAAjC,CALJ,EAMKJ,OANL,EAOK,CAACL,UAAU,CAACH,OAAZ,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,KAAK,CAACW,SAAV,CAP5B,CADJ;AAWH,CArCD;;AAuCA,eAAeZ,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n            return {\r\n                ...state, // all existing state\r\n                // bewlow are the state we want to update\r\n                value: action.val,\r\n                isValid: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = (props) => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: \"\",\r\n        isValid: false,\r\n    });\r\n    const onChangeHandler = (event) => {\r\n        dispatch({ type: \"CHANGE\", val: event.target.value });\r\n    };\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={onChangeHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n            <textarea\r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onChange={onChangeHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                !inputState.isValid && \"form-control--invalid\"\r\n            }`}\r\n        >\r\n            <label htmlFor={props.id}>{props.lable}</label>\r\n            {element}\r\n            {!inputState.isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}